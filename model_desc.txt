> Transition rules

Model: 
    - SEIR (Susceptible - Exposed - Infectious - Recovered)

Time:
    - Uses discrete steps

Legend:
    (MID) - Microparasitic Infectious Diseases
    (S)   - Susceptible
    (E)   - Exposed
    (I)   - Infectious
    (R)   - Recovered
    (γ)   - Recover probability
    (D)   - Duration of infection
    (β)   - Transmission rate
    (σ)   - Latency period of infection
    

Population:
    - Represented by a Cellular Automata

Basic interaction for immunity development to MID in a given population:

We assume that this is a well-mixed population.

- If a cell is (S)
    1. Count how many neighbors are (I)
    2. Calculate the infection probability
    3. Based on the result of IP, decide if S state will change to either (E) or (I)
- if a cell is (E)
    1. Calculate if (E) is within the latency period σ
    2. If σ is expired, (E) becomes (I) 
- If a cell is (I)
    1. Stay infected for D steps
    2. Based on probability γ decide if I will change its state to (R)
- If a cell is (R)
    1. Stay recovered (immune)

Infection probability: (IP)
    - P(infection) = 1 - (1 - β) ^ n, where n = number of (I) neighbors

Additional simulations:
    1. Change cells from places to simulate steps (e.g. moving through a neighborhood)
    2. Vaccination can be done by assigning (R) randomly to cells from time to time that can also be defined randomly

Implementation diary:
    - 2D grid (implemented)
    - Terminal helper functions (implementing as needed)
    - Basic SEIR model
        - SEIR creation, defining random states for each cell  (implemented)
        - Cell movement (implemented)
        - Cell state assignment (implemented)
        - Cell state check (implemented)
        - SEIR infection probability calculation - calculate_infection_probability (implemented)
        - Check cell state and if it should change (implemented)
        - Expose and infect cells based on probability (implemented)
        - Recover cells after the recovery time reaches 0 (implemented)
        - Latency period is used to calculate how much time is needed for a cell go from exposed -> infectious (implemented)
        - Constant numbers defined in seir.h (BASE_D, BETA, LATENCY_PERIOD, GAMMA) (implemented)
    - Similarity dimension (implemented)
        - Using box-counting method for similarity dimension (implemented)
        - To better analyse the spread, using linear regression: log(counts) vs log(1 / box_size) to account for multiple box-sizes (implemented)
        - Only uses valid points (non-zero) (implemented)
        - Read result:
            - Start (0.0) no infections;
            - Between 1.0 to 2.0 (infections form different structures, but is not fully spread);
            - 2.0 (infection is fully spread); 
            - >2.0 is not possible as this is a 2D grid, if it happens, there is an error, probably between the monitor and the chair
    - Graphical UI for visualization using the SDL2 library (implemented)
    - Graphical visualization of maps and quantitative numbers using Python with pandas, seaborn, matplotlib and numpy (implemented)
